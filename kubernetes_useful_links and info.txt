#- LINKS TO INTERESTING ARTICLES
https://www.mirantis.com/blog/introduction-to-yaml-creating-a-kubernetes-deployment/ -> quick view of creating a deployment
https://loft.sh/blog/kubernetes-probes-startup-liveness-readiness/
https://laurinevala.medium.com/visualizing-kubernetes-resources-ee9d8c16d264  visual maps of Pods

~
#- MOST COMMON ISSUES
https://grapeup.com/blog/common-kubernetes-failures-at-scale/
https://www.itprotoday.com/hybrid-cloud/8-problems-kubernetes-architecture
https://kukulinski.com/10-most-common-reasons-kubernetes-deployments-fail-part-1/
https://pythonspeed.com/articles/dont-need-kubernetes/
https://learnk8s.io/troubleshooting-deployments

~
#- GITHUBS OF INTEREST
https://github.com/kodekloudhub/certified-kubernetes-administrator-course

~
https://codefresh.io/kubernetes-tutorial/kubernetes-antipatterns-1/

~
https://blog.pipetail.io/posts/2020-05-04-most-common-mistakes-k8s/
- resources - requests and limits -> OOMkill
- liveness and readiness probes
- LoadBalancer for every http service
- non-kubernetes-aware cluster autoscaling
- Not using the power of IAM/RBAC
- self anti-affinities for pods
- no poddisruptionbudget -> pod upgrade
- more tenants or envs in shared cluster
- externalTrafficPolicy: Cluster
- pet clusters + stressing the control plane too much

~
#- What's the difference between ClusterIP, NodePort and LoadBalancer service types in Kubernetes?
A ClusterIP exposes the following:
spec.clusterIp:spec.ports[*].port
You can only access this service while inside the cluster. It is accessible from its spec.clusterIp port. 
If a spec.ports[*].targetPort is set it will route from the port to the targetPort. The CLUSTER-IP you get when 
calling kubectl get services is the IP assigned to this service within the cluster internally.

A NodePort exposes the following:
<NodeIP>:spec.ports[*].nodePort
spec.clusterIp:spec.ports[*].port
If you access this service on a nodePort from the nodes external IP, 
it will route the request to spec.clusterIp:spec.ports[*].port, which will in turn route it to your
spec.ports[*].targetPort, if set. This service can also be accessed in the same way as ClusterIP.
Your NodeIPs are the external IP addresses of the nodes. You cannot access your service from 
spec.clusterIp:spec.ports[*].nodePort.

A LoadBalancer exposes the following:
spec.loadBalancerIp:spec.ports[*].port
<NodeIP>:spec.ports[*].nodePort
spec.clusterIp:spec.ports[*].port
You can access this service from your load balancers IP address, which routes your request to a nodePort, 
which in turn routes the request to the clusterIP port. You can access this service as you would a NodePort 
or a ClusterIP service as well.

To clarify in a simple way:
ClusterIp exposure < NodePort exposure < LoadBalancer exposure

ClusterIp = Expose service through k8s cluster with ip/name:port
NodePort = Expose service through Internal network VMs also external to k8s ip/name:port
LoadBalancer = Expose service through External world or whatever you defined in your LB.
~
