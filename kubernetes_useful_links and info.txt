#- KUBERNETES INFO
#- WHAT IS IT?
it is a container management technology developed by GOOGLE (later made open source in 2015) 
to manage contai­nerized applic­ati­on(­orc­hes­tra­tion).

#- WHY?
1.Service discovery and load balancing 1.Service discovery and load balancing
2.Auto­mated rollbacks
3.Self­-he­aling
4.Auto Scaling
5.Canary updates and Rolling updates
6.Open source & Community driven
7.High Availa­bility

#- CONCEPTS
Node -> machine in the cluster
Docker -> helps in creation of containers that includes apps and its binaries.
Pods -> A Pod is the basic building block of Kubern­­et­e­s–the smallest and simplest unit in the Kubernetes object model that you create or deploy,is also a group of containers (1 or more).Only containers of same pod can share shared storage.
Service -> is an abstra­­ction which defines a logical set of Pods and a policy by which to access them.
Jobs -> Creates pod(s) and ensures that a specified number succes­­sfully comple­ted.When a specified number of successful run of pods is completed, then the job is considered complete.
Cronjob -> job scheduler in K8s
Repli­­casets -> ensures how many replica of pod should be running.
Names­­paces -> Logical seperation between teams and thier enviro­nme­nts.It allows various teams(­Dev­,Prod) to share k8s cluster by providing isolated workspace.
Deployment -> Desired state of pods for declar­­ative updates
Daemonset -> Ensures a particular pod to be run on some or all nodes
Persis­­te­n­t­volume -> Persistent storage in the cluster with an indepe­­ndent lifecycle.
persis­­te­n­t­vo­­lum­­eclaim -> Request for storage (for a Persi­­ste­­nt­V­o­lume) by a user
ingress -> is a collection of rules that allow inbound connec­­tions to reach the cluster services.

https://blog.pipetail.io/posts/2020-05-04-most-common-mistakes-k8s/
- resources - requests and limits -> OOMkill
- liveness and readiness probes
- LoadBalancer for every http service
- non-kubernetes-aware cluster autoscaling
- Not using the power of IAM/RBAC
- self anti-affinities for pods
- no poddisruptionbudget -> pod upgrade
- more tenants or envs in shared cluster
- externalTrafficPolicy: Cluster
- pet clusters + stressing the control plane too much
~
https://kubernetes.io/docs/concepts/configuration/overview/ -> configuration best practices
~
https://www.mirantis.com/blog/introduction-to-yaml-creating-a-kubernetes-deployment/ -> quick view of creating a deployment
~
#- What's the difference between ClusterIP, NodePort and LoadBalancer service types in Kubernetes?
A ClusterIP exposes the following:
spec.clusterIp:spec.ports[*].port
You can only access this service while inside the cluster. It is accessible from its spec.clusterIp port. 
If a spec.ports[*].targetPort is set it will route from the port to the targetPort. The CLUSTER-IP you get when 
calling kubectl get services is the IP assigned to this service within the cluster internally.

A NodePort exposes the following:
<NodeIP>:spec.ports[*].nodePort
spec.clusterIp:spec.ports[*].port
If you access this service on a nodePort from the nodes external IP, 
it will route the request to spec.clusterIp:spec.ports[*].port, which will in turn route it to your
spec.ports[*].targetPort, if set. This service can also be accessed in the same way as ClusterIP.
Your NodeIPs are the external IP addresses of the nodes. You cannot access your service from 
spec.clusterIp:spec.ports[*].nodePort.

A LoadBalancer exposes the following:
spec.loadBalancerIp:spec.ports[*].port
<NodeIP>:spec.ports[*].nodePort
spec.clusterIp:spec.ports[*].port
You can access this service from your load balancers IP address, which routes your request to a nodePort, 
which in turn routes the request to the clusterIP port. You can access this service as you would a NodePort 
or a ClusterIP service as well.

To clarify in a simple way:
ClusterIp exposure < NodePort exposure < LoadBalancer exposure

ClusterIp = Expose service through k8s cluster with ip/name:port
NodePort = Expose service through Internal network VMs also external to k8s ip/name:port
LoadBalancer = Expose service through External world or whatever you defined in your LB.
~
https://github.com/kodekloudhub/certified-kubernetes-administrator-course
~